getwd()
setwd("C:\\RevBayes\\Rhinos")

## loading the data

filenames <- v("data/rrna.nex", "data/coding_1.nex", "data/coding_2.nex", "data/coding_3.nex")
n_data_subsets <- filenames.size()

for(i in 1:n_data_subsets){
data[i] = readDiscreteCharacterData(filenames[i])
}

num_sites <- v(data[1].nchar(), data[2].nchar(), data[3].nchar(), data[4].nchar())

taxa <- data[1].taxa()
n_taxa <- data[1].ntaxa()
num_branches <- 2 * n_taxa - 3

## moves and monitors

moves = VectorMoves()
monitors = VectorMonitors()

## Creating Q matrix 
# excangeability rates

for (i in 1:n_data_subsets) {
    er_prior[i] <- v(1,1,1,1,1,1)
    er[i] ~ dnDirichlet(er_prior[i])
    moves.append( mvBetaSimplex(er[i], alpha=10, tune=true, weight=3) )
}

# stationary frequencies

for (i in 1:n_data_subsets) {
    pi_prior[i] <- v(1,1,1,1)
    pi[i] ~ dnDirichlet(pi_prior[i])
    moves.append( mvBetaSimplex(pi[i], alpha=10, tune=true, weight=2) )
}

# GTR model matrix

for (i in 1:n_data_subsets) {
    Q[i] := fnGTR(er[i],pi[i]) 
}

## +G +I

for (i in 1:n_data_subsets) {
    alpha[i] ~ dnUniform( 0.0, 1E8 )
    gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false )

    moves.append( mvScale(alpha[i],weight=2) )
}

for (i in 1:n_data_subsets) {
    pinvar[i] ~ dnBeta(1,1)
    moves.append( mvBetaProbability(pinvar[i], delta=10.0, tune=true, weight=2.0) )
}

# specify a rate multiplier for each partition
part_rate_mult ~ dnDirichlet( rep(10.0, n_data_subsets) )
moves.append( mvBetaSimplex(part_rate_mult, alpha=1.0, tune=true, weight=n_data_subsets) )
moves.append( mvDirichletSimplex(part_rate_mult, alpha=1.0, tune=true, weight=2.0) )

part_rate := (part_rate_mult / num_sites) * sum(num_sites)

## Tree prior

#out_group = clade("Elasmotherium_sibiricum")

topology ~ dnUniformTopology(taxa)
moves.append( mvNNI(topology, weight=n_taxa/2.0) )
moves.append( mvSPR(topology, weight=n_taxa/10.0) )

# Bracnh lenghts prior

for (i in 1:num_branches) {
    bl[i] ~ dnExponential(10.0)
    moves.append( mvScale(bl[i]) )
}

TL := sum(bl)

psi := treeAssembly(topology, bl)


for (i in 1:n_data_subsets) {
    seq[i] ~ dnPhyloCTMC(tree=psi, Q=Q[i], branchRates=part_rate[i], siteRates=gamma_rates[i], pInv=pinvar[i], type="DNA")
    seq[i].clamp(data[i])
}

my_model = model(psi)

monitors.append( mnModel(filename="output/mito_rhino_RB.log",printgen=50) )
monitors.append( mnFile(psi, filename="output/mito_rhino_RB.trees", printgen=50) )
monitors.append( mnScreen(TL, printgen=10) )

mymcmc = mcmc(my_model, moves, monitors, nruns=1)
mymcmc.run(100000, tuningInterval=200)

treetrace = readTreeTrace("output/mito_rhino_RB.trees", treetype="non-clock")
treetrace.summarize()
mapTree(treetrace, "output/mito_rhino_MAP.tre")
mapTree(treetrace, "output/mito_rhino_MAP.tre")