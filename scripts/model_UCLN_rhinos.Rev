## Defining relaxed clock model for molecular data

H        = 0.587405

# We assume a relaxed morphological clock rate, drawn from an lognormal prior #
# The mean of the rate is drawn from a uniform prior distribution
clock_mean ~ dnUniform(0.0,1.0)
clock_mean.setValue( 1E-2 )

moves.append( mvScaleBactrian(clock_mean, lambda=0.01, weight=2.0, tuneTarget=0.44) )
moves.append( mvScaleBactrian(clock_mean, lambda=1,    weight=2.0, tuneTarget=0.10) )
moves.append( mvScaleBactrian(clock_mean, lambda=0.1,  weight=2.0, tuneTarget=0.01) )


### get the number of branches in the tree
n_branches <- 2 * n_taxa - 2

### we will also estimate the standard deviation of the lognormal (ucln_sigma) with an exponential hyperprior
clock_sd ~ dnExponential(1.0/(2.0*H))
clock_sd.setValue( H / 5.0 )

### clock_sd will be operated on by scale moves
moves.append( mvScaleBactrian(clock_sd, lambda=0.5, weight=4.0) )

up_down_UCLN = mvUpDownScale( weight = 3.0 )
up_down_UCLN.addVariable( clock_mean, up=TRUE )


### now we will create a vector of stochastic nodes
### each element in the vector represents a branch rate
### the indices of the vector correspond to branch indices in the tree
### using a for-loop initialize the branch rates and assign a move to each one
for(i in 1:n_branches){
    branch_rates[i] ~ dnLognormal(clock_mean, clock_sd)
    moves.append(mvScaleBactrian(branch_rates[i],lambda=1.0,tune=true,weight=2.0))
    up_down_UCLN.addVariable( branch_rates[i], up=TRUE )
}
### add 2 more moves on the branch rate vector
moves.append( mvVectorScale(branch_rates,lambda=1.0,weight=3.0) )
moves.append( mvRateAgeBetaShift(tree=phylogeny, rates=branch_rates, weight=n_taxa) )

### a helpful parameter to monitor
mean_rt := mean(branch_rates)
